[project]
name = "bowls"
version = "1.0.0-rc-0"
readme = "README.md"
description = "A django website to setup a lawn bowls tournament."
requires-python = ">=3.11"
dependencies = ["Django", "psycopg2", "whitenoise", "gunicorn"]

[project.optional-dependencies]
dev = [
    "bump2version",
    "django-debug-toolbar",
    "debugpy",
    "factory_boy",
    "Faker",
    "freezegun",
    "mock",
    "pip-tools",
    "pre-commit",
    "pytest",
    "pytest-django",
    "ruff==0.2.1",          # Keep this in sync with the pre-commit version
    "ruff-lsp",             # language server to use ruff with vim and neovim

    # Static type checking
    "pyright",
    "django-types",
    "djangorestframework-types",
]

[build-system]
requires = ["hatchling", "cython>=3"]
build-backend = "hatchling.build"

[tool.bandit]
# Configuration for bandit security checking tool
exclude_dirs = []

[tool.pyright]
include = ["app"]
exclude = ["**/tests", "**/migrations", "**/vendored", "**/__pycache__"]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "bowls.settings.development"
markers = [
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests",
    "migrations",
    "manage.py",
    "conftest.py",
]

line-length = 95
indent-width = 4

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.extend-per-file-ignores]
# Ignore specific rules in specific files
"__init__.py" = ["F403", "F401"]
"*/management/commands/*" = ["A003"]
"*/serializers/*" = ["N815"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Ignore modules
    "PTH",    # flake8-use-pathlib
    "ERA",    # commented out code
    "ANN",    # flake8 annotations
    "FBT",    # flake8 boolean trap
    "EM",     # flake8-errmsg
    "BLE",    # allow broad exceptions, catch Exception
    "TD",     # todo tags
    "FIX",    # fixme tags
    "RET",
    "ISC001",

    # rules we should look at NOT ignoring in the future
    "ARG001",
    "ARG002",
    "ARG004",
    "ARG005",
    "B904",    # use raise-from
    "C411",
    "DJ001",   # null allowed in Django string field
    "DJ012",
    "DTZ005",
    "E721",
    "G003",
    "INT001",
    "N802",
    "PERF401",
    "PERF402",
    "PLR0912",
    "PLR2004", # magic constants
    "PLR5501",
    "PLW2901",
    "RSE102",
    "RUF001",
    "RUF015",
    "S110",
    "S112",
    "S308",
    "SIM",
    "TID252",
    "TRY002",
    "TRY201",
    "TRY302",
    "TRY401",
    # "UP",

    # Ignore individual rules
    "D406",
    "D409",
    "D416",
    "C416",   # unnecessary-comprehension
    "C419",   # uunnecessary-comprehension-any-all
    "COM812",
    "D105",   # Allow magic methods to not have docstring
    "D106",   # Allow Meta class to not have docstring
    "D200",   # Allow 1 line docstrings on multi lines
    "D203",
    "D212",
    "D419",   # empty-docstring
    "DJ007",  # allow using __all__ for fields
    "DJ008",  # ignore missing __str__ in django model
    "E401",   # multiple-imports
    "E501",   # line-too-long
    "E731",
    "F541",
    "G004",   # f-strings in logging messages
    "N806",   # lowercase variable - want to allow app.model() assigned to uppercase model name
    "W605",
    "PGH004", # blanket-noqa
    "RUF012", # mutable class attributes should be typing.ClassVar
    "SLF001", # Private member accessed
    "T201",   # print statement
    "TRY003", # long messages in exceptions
    "TRY300", # return inside the exception
    "TRY301", # raise exception to inner function
    "TRY400", # use loggin.exception instead of error

    #pylint rules
    "PLC0205", # single-string-used-for-slots
    "PLC0414", # useless-import-alias
    "PLC0415", # import-outside-toplevel
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "PIE790",  # unnecessary-pass
]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pylint]
max-branches = 15
